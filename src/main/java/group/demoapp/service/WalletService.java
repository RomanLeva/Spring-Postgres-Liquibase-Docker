package group.demoapp.service;import group.demoapp.aspect.exception.WalletException;import group.demoapp.repository.entity.Wallet;import group.demoapp.repository.WalletJpaRepo;import group.demoapp.service.dto.WalletChangeDto;import group.demoapp.service.dto.WalletDto;import group.demoapp.service.dto.WalletRegisterDto;import group.demoapp.service.mapper.MapperServiceToRepository;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;@Service@AllArgsConstructorpublic class WalletService {    private final WalletJpaRepo walletRepository;    private final MapperServiceToRepository mapper;    @Transactional    public WalletDto getWalletById(Long id) {        Wallet wallet = walletRepository.findById(id).orElse(null);        if (wallet == null) {            throw new WalletException("Wallet with requested UUID was not found");        }        return mapper.mapWalletToDto(wallet);    }    @Transactional    public void updateWallet(WalletChangeDto walletChangeDto) {        int rowsAffected = 0;        if (walletChangeDto.getOperationType() == WalletChangeDto.OPERATION_TYPE.DEPOSIT){            rowsAffected = walletRepository.depositWalletByUuid(walletChangeDto.getUuid(), walletChangeDto.getAmount());        } else if(walletChangeDto.getOperationType() == WalletChangeDto.OPERATION_TYPE.WITHDRAW) {            rowsAffected = walletRepository.withdrawWalletByUuid(walletChangeDto.getUuid(), walletChangeDto.getAmount(), BigDecimal.ZERO);        }        if (rowsAffected == 0) {            Wallet wallet = walletRepository.findById(walletChangeDto.getUuid()).orElse(null);            if(wallet != null && wallet.getAmount().subtract( walletChangeDto.getAmount()).compareTo(BigDecimal.ZERO) < 0){                throw new WalletException("Insufficient funds");            }        }    }    public WalletDto registerWallet(WalletRegisterDto walletRegisterDto) {        Wallet wallet = mapper.mapWalletRegisterDtoToWallet(walletRegisterDto);        Wallet save = walletRepository.save(wallet);        return mapper.mapWalletToDto(save);    }}