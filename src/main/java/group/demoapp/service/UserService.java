package group.demoapp.service;import group.demoapp.aspect.exception.UserException;import group.demoapp.repository.UserJpaRepo;import group.demoapp.repository.entity.User;import group.demoapp.service.dto.UserSummaryDto;import group.demoapp.service.mapper.MapperServiceToRepository;import lombok.AllArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Service@AllArgsConstructorpublic class UserService {    private final UserJpaRepo userRepository;    private final MapperServiceToRepository mapper;    public List<User> getAllUsers() {        return userRepository.findAll();    }    public Page<User> getAllUsers(Pageable pageable) {        return userRepository.findAll(pageable);    }    public User getUserById(Long id) {        User user = userRepository.findById(id).orElseThrow(() -> new UserException("User  not found"));;        user.getOrders();        return user;    }    public User createUser(UserSummaryDto userDto) {        User user = mapper.mapUserDtoToUser(userDto);        return userRepository.save(user);    }    @Transactional(rollbackFor = UserException.class)    public void updateUser(Long id, UserSummaryDto userDetails) {        User user = userRepository.findById(id).orElseThrow(() -> new UserException("User  not found"));        user.setName(userDetails.getName());        user.setEmail(userDetails.getEmail());        userRepository.save(user);    }    @Transactional(rollbackFor = UserException.class)    public void deleteUser(Long id) {        userRepository.findById(id).orElseThrow(() -> new UserException("User  not found"));        userRepository.deleteById(id);    }}